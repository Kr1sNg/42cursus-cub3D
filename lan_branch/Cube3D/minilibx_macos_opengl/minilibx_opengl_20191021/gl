mlx.h:** La MinilibX utilise 2 frameworks Mac : OpenGL et AppKit
mlx.h:**   -framework OpenGL -framework AppKit
mlx_opengl.m:#import <OpenGL/gl3.h>
mlx_opengl.m:#import <AppKit/NSOpenGLView.h>
mlx_opengl.m:NSOpenGLPixelFormatAttribute pfa_attrs_opengl[] =
mlx_opengl.m:    NSOpenGLPFADepthSize, 32,
mlx_opengl.m:    NSOpenGLPFADoubleBuffer,
mlx_opengl.m:    NSOpenGLPFAOpenGLProfile, NSOpenGLProfileVersion4_1Core,
mlx_opengl.m:  [(id)(win_ptr->winid) flushGLContext];
mlx_opengl.m:  [(id)(win_ptr->winid) selectGLContext];
mlx_init_loop.m:#import <OpenGL/gl3.h>
mlx_init_loop.m:#import <AppKit/NSOpenGLView.h>
mlx_init_loop.m:	  [(id)win->winid selectGLContext];
mlx_init_loop.m:  [(id)(win_ptr->winid) selectGLContext];
mlx_init_loop.m:	  [(id)(win->winid) selectGLContext];
mlx_new_image.m:#import <OpenGL/gl3.h>
mlx_new_image.m:  //    return (NULL);  // need at leat one window created to have openGL context and create texture
mlx_new_image.m:  glBindTexture(GL_TEXTURE_2D, imgctx->texture);
mlx_new_image.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
mlx_new_image.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
mlx_new_image.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP_TO_EDGE);
mlx_new_image.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP_TO_EDGE);
mlx_new_image.m:	       GL_TEXTURE_2D, 0,           /* target, level of detail */
mlx_new_image.m:	       GL_RGBA8,                    /* internal format */
mlx_new_image.m:	       GL_BGRA, GL_UNSIGNED_BYTE,   /* external format, type */
mlx_new_image.m:  glBindBuffer(GL_ARRAY_BUFFER, imgctx->vbuffer);
mlx_new_image.m:  glBufferData(GL_ARRAY_BUFFER, sizeof(img->vertexes), img->vertexes, GL_DYNAMIC_DRAW); // 4 points buff
mlx_new_image.m:  [(id)(win_ptr->winid) selectGLContext];
mlx_new_image.m:  glBindTexture(GL_TEXTURE_2D, imgctx->texture);
mlx_new_image.m:  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, img_ptr->width, img_ptr->height, 0,
mlx_new_image.m:	       GL_BGRA, GL_UNSIGNED_BYTE, img_ptr->buffer);
mlx_new_image.m:  [(id)(win_ptr->winid) selectGLContext];
mlx_new_image.m:	      [(id)(win->winid) selectGLContext];
mlx_new_window.m:#import <OpenGL/gl3.h>
mlx_new_window.m:#import <AppKit/NSOpenGLView.h>
mlx_new_window.m:NSOpenGLPixelFormatAttribute pfa_attrs[] =
mlx_new_window.m:    NSOpenGLPFADepthSize, 32,
mlx_new_window.m:    NSOpenGLPFAOpenGLProfile, NSOpenGLProfileVersionLegacy,
mlx_new_window.m:static const GLfloat pixel_vertexes[8] =
mlx_new_window.m:- (id) initWithRect: (NSRect)rect andTitle: (NSString *)title pfaAttrs: (NSOpenGLPixelFormatAttribute *)attrs
mlx_new_window.m:  NSOpenGLPixelFormat* pixFmt = [[NSOpenGLPixelFormat alloc] initWithAttributes:attrs];
mlx_new_window.m:      //      printf("init ctx: current %p ", [NSOpenGLContext currentContext]);
mlx_new_window.m:      //      ctx = [[NSOpenGLContext alloc] initWithFormat:pixFmt shareContext:[NSOpenGLContext currentContext]]; //other_context];
mlx_new_window.m:      [[self openGLContext] makeCurrentContext];
mlx_new_window.m:      [[self openGLContext] setView:self];
mlx_new_window.m:      [self prepareOpenGL];
mlx_new_window.m:      glClear(GL_COLOR_BUFFER_BIT);
mlx_new_window.m:  glDisable(GL_DEPTH_TEST);
mlx_new_window.m:  glBindBuffer(GL_ARRAY_BUFFER, pixel_vbuffer);
mlx_new_window.m:  glBufferData(GL_ARRAY_BUFFER, sizeof(pixel_vertexes), pixel_vertexes, GL_DYNAMIC_DRAW); // 4 points buff
mlx_new_window.m:  // pixel_ptr = glMapBuffer(GL_ARRAY_BUFFER, GL_WRITE_ONLY);
mlx_new_window.m:  glBindTexture(GL_TEXTURE_2D, pixel_texture);
mlx_new_window.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
mlx_new_window.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
mlx_new_window.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP_TO_EDGE);
mlx_new_window.m:  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP_TO_EDGE);
mlx_new_window.m:	       GL_TEXTURE_2D, 0,           /* target, level of detail */
mlx_new_window.m:	       GL_RGBA8,                    /* internal format */
mlx_new_window.m:	       GL_BGRA, GL_UNSIGNED_BYTE,   /* external format, type */
mlx_new_window.m:- (void) selectGLContext
mlx_new_window.m:  if ([NSOpenGLContext currentContext] != [self openGLContext])
mlx_new_window.m:      //      printf("ctx: %p => %p\n", [NSOpenGLContext currentContext], [self openGLContext]);
mlx_new_window.m:      [[self openGLContext] makeCurrentContext];
mlx_new_window.m:- (void) flushGLContext
mlx_new_window.m:  [[self openGLContext] flushBuffer];
mlx_new_window.m:- (NSOpenGLContext *) ctx
mlx_new_window.m:  glBindTexture(GL_TEXTURE_2D, pixel_vbuffer);
mlx_new_window.m:  glTexSubImage2D(GL_TEXTURE_2D, 0, x, y, 1, 1, GL_BGRA, GL_UNSIGNED_BYTE, (GLvoid *)(&color));
mlx_new_window.m:  [self selectGLContext];
mlx_new_window.m:  glClear(GL_COLOR_BUFFER_BIT);
mlx_new_window.m:  glActiveTexture(GL_TEXTURE0);
mlx_new_window.m:  glBindTexture(GL_TEXTURE_2D, imgctx->texture);
mlx_new_window.m:  glBindBuffer(GL_ARRAY_BUFFER, imgctx->vbuffer);
mlx_new_window.m:  glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2*sizeof(GLfloat), (void*)0);
mlx_new_window.m:  glEnable(GL_BLEND);
mlx_new_window.m:  glBlendFunc(GL_ONE_MINUS_SRC_ALPHA, GL_SRC_ALPHA);  // src alpha 0xFF : keep dst
mlx_new_window.m:  glBlendEquation(GL_FUNC_ADD);
mlx_new_window.m:  glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
mlx_new_window.m:  GLfloat color_tab[4];
mlx_new_window.m:  glActiveTexture(GL_TEXTURE0);
mlx_new_window.m:  glBindTexture(GL_TEXTURE_2D, imgctx->texture);
mlx_new_window.m:  glBindBuffer(GL_ARRAY_BUFFER, imgctx->vbuffer);
mlx_new_window.m:  glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2*sizeof(GLfloat), (void*)0);
mlx_new_window.m:  glEnable(GL_BLEND);
mlx_new_window.m:  glBlendFunc(GL_ONE_MINUS_SRC_ALPHA, GL_SRC_ALPHA);  // src alpha 0xFF : keep dst
mlx_new_window.m:  glBlendEquation(GL_FUNC_ADD);
mlx_new_window.m:  glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
mlx_new_window.m:  glActiveTexture(GL_TEXTURE0);
mlx_new_window.m:  glBindTexture(GL_TEXTURE_2D, pixel_vbuffer);
mlx_new_window.m:  glBindBuffer(GL_ARRAY_BUFFER, pixel_vbuffer);
mlx_new_window.m:  glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2*sizeof(GLfloat), (void*)0);
mlx_new_window.m:  glEnable(GL_BLEND);
mlx_new_window.m:  glBlendFunc(GL_ONE_MINUS_SRC_ALPHA, GL_SRC_ALPHA);  // src alpha 0xFF : keep dst
mlx_new_window.m:  glBlendEquation(GL_FUNC_ADD);
mlx_new_window.m:  glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
mlx_new_window.m:  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, size_x, size_y, 0, GL_BGRA, GL_UNSIGNED_BYTE, pixtexbuff);
mlx_new_window.m:  [(id)(win_ptr->winid) selectGLContext];
mlx_new_window.m:      [(id)(win_to_del->winid) selectGLContext];
mlx_xpm.c:#include <OpenGL/gl3.h>
mlx_png.c:#include <OpenGL/gl3.h>
mlx_mouse.m:#import <OpenGL/gl3.h>
mlx_shaders.c:#include <OpenGL/gl3.h>
mlx_shaders.c:void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())
mlx_shaders.c:  GLint log_length;
mlx_shaders.c:  param_func(object, GL_INFO_LOG_LENGTH, &log_length);
mlx_shaders.c:  GLint action_ok;
mlx_shaders.c:  glsl->pixel_vshader = glCreateShader(GL_VERTEX_SHADER);
mlx_shaders.c:  glShaderSource(glsl->pixel_vshader, 1, (const GLchar**)&source, &length);
mlx_shaders.c:  glGetShaderiv(glsl->pixel_vshader, GL_COMPILE_STATUS, &action_ok);
mlx_shaders.c:  glsl->pixel_fshader = glCreateShader(GL_FRAGMENT_SHADER);
mlx_shaders.c:  glShaderSource(glsl->pixel_fshader, 1, (const GLchar**)&source, &length);
mlx_shaders.c:  glGetShaderiv(glsl->pixel_fshader, GL_COMPILE_STATUS, &action_ok);
mlx_shaders.c:  glGetProgramiv(glsl->pixel_program, GL_LINK_STATUS, &action_ok);
mlx_shaders.c:  GLint action_ok;
mlx_shaders.c:  glsl->image_vshader = glCreateShader(GL_VERTEX_SHADER);
mlx_shaders.c:  glShaderSource(glsl->image_vshader, 1, (const GLchar**)&source, &length);
mlx_shaders.c:  glGetShaderiv(glsl->image_vshader, GL_COMPILE_STATUS, &action_ok);
mlx_shaders.c:  glsl->image_fshader = glCreateShader(GL_FRAGMENT_SHADER);
mlx_shaders.c:  glShaderSource(glsl->image_fshader, 1, (const GLchar**)&source, &length);
mlx_shaders.c:  glGetShaderiv(glsl->image_fshader, GL_COMPILE_STATUS, &action_ok);
mlx_shaders.c:  glGetProgramiv(glsl->image_program, GL_LINK_STATUS, &action_ok);
mlx_shaders.c:  GLint action_ok;
mlx_shaders.c:  glsl->font_vshader = glCreateShader(GL_VERTEX_SHADER);
mlx_shaders.c:  glShaderSource(glsl->font_vshader, 1, (const GLchar**)&source, &length);
mlx_shaders.c:  glGetShaderiv(glsl->font_vshader, GL_COMPILE_STATUS, &action_ok);
mlx_shaders.c:  glsl->font_fshader = glCreateShader(GL_FRAGMENT_SHADER);
mlx_shaders.c:  glShaderSource(glsl->font_fshader, 1, (const GLchar**)&source, &length);
mlx_shaders.c:  glGetShaderiv(glsl->font_fshader, GL_COMPILE_STATUS, &action_ok);
mlx_shaders.c:  glGetProgramiv(glsl->font_program, GL_LINK_STATUS, &action_ok);
mlx_int.h:  GLuint	pixel_vshader;
mlx_int.h:  GLuint	pixel_fshader;
mlx_int.h:  GLuint	pixel_program;
mlx_int.h:  GLint		loc_pixel_position;
mlx_int.h:  GLint		loc_pixel_texture;
mlx_int.h:  GLint		loc_pixel_winhalfsize;
mlx_int.h:  GLuint	image_vshader;
mlx_int.h:  GLuint	image_fshader;
mlx_int.h:  GLuint	image_program;
mlx_int.h:  GLint		loc_image_position;
mlx_int.h:  GLint		loc_image_winhalfsize;
mlx_int.h:  GLint		loc_image_texture;
mlx_int.h:  GLint		loc_image_pos;
mlx_int.h:  GLint		loc_image_size;
mlx_int.h:  GLuint	font_vshader;
mlx_int.h:  GLuint	font_fshader;
mlx_int.h:  GLuint	font_program;
mlx_int.h:  GLint		loc_font_position;
mlx_int.h:  GLint		loc_font_winhalfsize;
mlx_int.h:  GLint		loc_font_texture;
mlx_int.h:  GLint		loc_font_color;
mlx_int.h:  GLint		loc_font_posinwin;
mlx_int.h:  GLint		loc_font_posinatlas;
mlx_int.h:  GLint		loc_font_atlassize;
mlx_int.h:  GLfloat		vertexes[8];
mlx_int.h:  GLuint		texture;
mlx_int.h:  GLuint		vbuffer;
mlx_new_window.h:@interface MlxWin : NSOpenGLView
mlx_new_window.h:  NSOpenGLContext	*ctx;
mlx_new_window.h:  GLuint		pixel_vbuffer;
mlx_new_window.h:  GLuint		pixel_texture;
mlx_new_window.h:- (id) initWithRect: (NSRect)rect andTitle: (NSString *)title pfaAttrs: (NSOpenGLPixelFormatAttribute *)attrs;
mlx_new_window.h:- (void) selectGLContext;
mlx_new_window.h:- (void) flushGLContext;
mlx_new_window.h:- (NSOpenGLContext *) ctx;
